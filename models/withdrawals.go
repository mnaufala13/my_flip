// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Withdrawal is an object representing the database table.
type Withdrawal struct {
	ID            string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountNumber string    `boil:"account_number" json:"account_number" toml:"account_number" yaml:"account_number"`
	Amount        int       `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	BankCode      string    `boil:"bank_code" json:"bank_code" toml:"bank_code" yaml:"bank_code"`
	Remark        string    `boil:"remark" json:"remark" toml:"remark" yaml:"remark"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	IsSuccess     bool      `boil:"is_success" json:"is_success" toml:"is_success" yaml:"is_success"`

	R *withdrawalR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L withdrawalL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WithdrawalColumns = struct {
	ID            string
	AccountNumber string
	Amount        string
	BankCode      string
	Remark        string
	CreatedAt     string
	IsSuccess     string
}{
	ID:            "id",
	AccountNumber: "account_number",
	Amount:        "amount",
	BankCode:      "bank_code",
	Remark:        "remark",
	CreatedAt:     "created_at",
	IsSuccess:     "is_success",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var WithdrawalWhere = struct {
	ID            whereHelperstring
	AccountNumber whereHelperstring
	Amount        whereHelperint
	BankCode      whereHelperstring
	Remark        whereHelperstring
	CreatedAt     whereHelpertime_Time
	IsSuccess     whereHelperbool
}{
	ID:            whereHelperstring{field: "\"withdrawals\".\"id\""},
	AccountNumber: whereHelperstring{field: "\"withdrawals\".\"account_number\""},
	Amount:        whereHelperint{field: "\"withdrawals\".\"amount\""},
	BankCode:      whereHelperstring{field: "\"withdrawals\".\"bank_code\""},
	Remark:        whereHelperstring{field: "\"withdrawals\".\"remark\""},
	CreatedAt:     whereHelpertime_Time{field: "\"withdrawals\".\"created_at\""},
	IsSuccess:     whereHelperbool{field: "\"withdrawals\".\"is_success\""},
}

// WithdrawalRels is where relationship names are stored.
var WithdrawalRels = struct {
	BigflipLog string
}{
	BigflipLog: "BigflipLog",
}

// withdrawalR is where relationships are stored.
type withdrawalR struct {
	BigflipLog *BigflipLog `boil:"BigflipLog" json:"BigflipLog" toml:"BigflipLog" yaml:"BigflipLog"`
}

// NewStruct creates a new relationship struct
func (*withdrawalR) NewStruct() *withdrawalR {
	return &withdrawalR{}
}

// withdrawalL is where Load methods for each relationship are stored.
type withdrawalL struct{}

var (
	withdrawalAllColumns            = []string{"id", "account_number", "amount", "bank_code", "remark", "created_at", "is_success"}
	withdrawalColumnsWithoutDefault = []string{"account_number", "bank_code", "remark"}
	withdrawalColumnsWithDefault    = []string{"id", "amount", "created_at", "is_success"}
	withdrawalPrimaryKeyColumns     = []string{"id"}
)

type (
	// WithdrawalSlice is an alias for a slice of pointers to Withdrawal.
	// This should generally be used opposed to []Withdrawal.
	WithdrawalSlice []*Withdrawal
	// WithdrawalHook is the signature for custom Withdrawal hook methods
	WithdrawalHook func(context.Context, boil.ContextExecutor, *Withdrawal) error

	withdrawalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	withdrawalType                 = reflect.TypeOf(&Withdrawal{})
	withdrawalMapping              = queries.MakeStructMapping(withdrawalType)
	withdrawalPrimaryKeyMapping, _ = queries.BindMapping(withdrawalType, withdrawalMapping, withdrawalPrimaryKeyColumns)
	withdrawalInsertCacheMut       sync.RWMutex
	withdrawalInsertCache          = make(map[string]insertCache)
	withdrawalUpdateCacheMut       sync.RWMutex
	withdrawalUpdateCache          = make(map[string]updateCache)
	withdrawalUpsertCacheMut       sync.RWMutex
	withdrawalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var withdrawalBeforeInsertHooks []WithdrawalHook
var withdrawalBeforeUpdateHooks []WithdrawalHook
var withdrawalBeforeDeleteHooks []WithdrawalHook
var withdrawalBeforeUpsertHooks []WithdrawalHook

var withdrawalAfterInsertHooks []WithdrawalHook
var withdrawalAfterSelectHooks []WithdrawalHook
var withdrawalAfterUpdateHooks []WithdrawalHook
var withdrawalAfterDeleteHooks []WithdrawalHook
var withdrawalAfterUpsertHooks []WithdrawalHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Withdrawal) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range withdrawalBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Withdrawal) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range withdrawalBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Withdrawal) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range withdrawalBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Withdrawal) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range withdrawalBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Withdrawal) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range withdrawalAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Withdrawal) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range withdrawalAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Withdrawal) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range withdrawalAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Withdrawal) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range withdrawalAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Withdrawal) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range withdrawalAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWithdrawalHook registers your hook function for all future operations.
func AddWithdrawalHook(hookPoint boil.HookPoint, withdrawalHook WithdrawalHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		withdrawalBeforeInsertHooks = append(withdrawalBeforeInsertHooks, withdrawalHook)
	case boil.BeforeUpdateHook:
		withdrawalBeforeUpdateHooks = append(withdrawalBeforeUpdateHooks, withdrawalHook)
	case boil.BeforeDeleteHook:
		withdrawalBeforeDeleteHooks = append(withdrawalBeforeDeleteHooks, withdrawalHook)
	case boil.BeforeUpsertHook:
		withdrawalBeforeUpsertHooks = append(withdrawalBeforeUpsertHooks, withdrawalHook)
	case boil.AfterInsertHook:
		withdrawalAfterInsertHooks = append(withdrawalAfterInsertHooks, withdrawalHook)
	case boil.AfterSelectHook:
		withdrawalAfterSelectHooks = append(withdrawalAfterSelectHooks, withdrawalHook)
	case boil.AfterUpdateHook:
		withdrawalAfterUpdateHooks = append(withdrawalAfterUpdateHooks, withdrawalHook)
	case boil.AfterDeleteHook:
		withdrawalAfterDeleteHooks = append(withdrawalAfterDeleteHooks, withdrawalHook)
	case boil.AfterUpsertHook:
		withdrawalAfterUpsertHooks = append(withdrawalAfterUpsertHooks, withdrawalHook)
	}
}

// One returns a single withdrawal record from the query.
func (q withdrawalQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Withdrawal, error) {
	o := &Withdrawal{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for withdrawals")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Withdrawal records from the query.
func (q withdrawalQuery) All(ctx context.Context, exec boil.ContextExecutor) (WithdrawalSlice, error) {
	var o []*Withdrawal

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Withdrawal slice")
	}

	if len(withdrawalAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Withdrawal records in the query.
func (q withdrawalQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count withdrawals rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q withdrawalQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if withdrawals exists")
	}

	return count > 0, nil
}

// BigflipLog pointed to by the foreign key.
func (o *Withdrawal) BigflipLog(mods ...qm.QueryMod) bigflipLogQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"withdrawal_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := BigflipLogs(queryMods...)
	queries.SetFrom(query.Query, "\"bigflip_logs\"")

	return query
}

// LoadBigflipLog allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (withdrawalL) LoadBigflipLog(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWithdrawal interface{}, mods queries.Applicator) error {
	var slice []*Withdrawal
	var object *Withdrawal

	if singular {
		object = maybeWithdrawal.(*Withdrawal)
	} else {
		slice = *maybeWithdrawal.(*[]*Withdrawal)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &withdrawalR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &withdrawalR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bigflip_logs`),
		qm.WhereIn(`bigflip_logs.withdrawal_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BigflipLog")
	}

	var resultSlice []*BigflipLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BigflipLog")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for bigflip_logs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bigflip_logs")
	}

	if len(withdrawalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BigflipLog = foreign
		if foreign.R == nil {
			foreign.R = &bigflipLogR{}
		}
		foreign.R.Withdrawal = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.WithdrawalID {
				local.R.BigflipLog = foreign
				if foreign.R == nil {
					foreign.R = &bigflipLogR{}
				}
				foreign.R.Withdrawal = local
				break
			}
		}
	}

	return nil
}

// SetBigflipLog of the withdrawal to the related item.
// Sets o.R.BigflipLog to related.
// Adds o to related.R.Withdrawal.
func (o *Withdrawal) SetBigflipLog(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BigflipLog) error {
	var err error

	if insert {
		related.WithdrawalID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"bigflip_logs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"withdrawal_id"}),
			strmangle.WhereClause("\"", "\"", 2, bigflipLogPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.WithdrawalID = o.ID

	}

	if o.R == nil {
		o.R = &withdrawalR{
			BigflipLog: related,
		}
	} else {
		o.R.BigflipLog = related
	}

	if related.R == nil {
		related.R = &bigflipLogR{
			Withdrawal: o,
		}
	} else {
		related.R.Withdrawal = o
	}
	return nil
}

// Withdrawals retrieves all the records using an executor.
func Withdrawals(mods ...qm.QueryMod) withdrawalQuery {
	mods = append(mods, qm.From("\"withdrawals\""))
	return withdrawalQuery{NewQuery(mods...)}
}

// FindWithdrawal retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWithdrawal(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Withdrawal, error) {
	withdrawalObj := &Withdrawal{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"withdrawals\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, withdrawalObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from withdrawals")
	}

	return withdrawalObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Withdrawal) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no withdrawals provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(withdrawalColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	withdrawalInsertCacheMut.RLock()
	cache, cached := withdrawalInsertCache[key]
	withdrawalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			withdrawalAllColumns,
			withdrawalColumnsWithDefault,
			withdrawalColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(withdrawalType, withdrawalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(withdrawalType, withdrawalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"withdrawals\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"withdrawals\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into withdrawals")
	}

	if !cached {
		withdrawalInsertCacheMut.Lock()
		withdrawalInsertCache[key] = cache
		withdrawalInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Withdrawal.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Withdrawal) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	withdrawalUpdateCacheMut.RLock()
	cache, cached := withdrawalUpdateCache[key]
	withdrawalUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			withdrawalAllColumns,
			withdrawalPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update withdrawals, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"withdrawals\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, withdrawalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(withdrawalType, withdrawalMapping, append(wl, withdrawalPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update withdrawals row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for withdrawals")
	}

	if !cached {
		withdrawalUpdateCacheMut.Lock()
		withdrawalUpdateCache[key] = cache
		withdrawalUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q withdrawalQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for withdrawals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for withdrawals")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WithdrawalSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), withdrawalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"withdrawals\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, withdrawalPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in withdrawal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all withdrawal")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Withdrawal) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no withdrawals provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(withdrawalColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	withdrawalUpsertCacheMut.RLock()
	cache, cached := withdrawalUpsertCache[key]
	withdrawalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			withdrawalAllColumns,
			withdrawalColumnsWithDefault,
			withdrawalColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			withdrawalAllColumns,
			withdrawalPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert withdrawals, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(withdrawalPrimaryKeyColumns))
			copy(conflict, withdrawalPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"withdrawals\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(withdrawalType, withdrawalMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(withdrawalType, withdrawalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert withdrawals")
	}

	if !cached {
		withdrawalUpsertCacheMut.Lock()
		withdrawalUpsertCache[key] = cache
		withdrawalUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Withdrawal record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Withdrawal) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Withdrawal provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), withdrawalPrimaryKeyMapping)
	sql := "DELETE FROM \"withdrawals\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from withdrawals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for withdrawals")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q withdrawalQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no withdrawalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from withdrawals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for withdrawals")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WithdrawalSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(withdrawalBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), withdrawalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"withdrawals\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, withdrawalPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from withdrawal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for withdrawals")
	}

	if len(withdrawalAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Withdrawal) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWithdrawal(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WithdrawalSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WithdrawalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), withdrawalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"withdrawals\".* FROM \"withdrawals\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, withdrawalPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WithdrawalSlice")
	}

	*o = slice

	return nil
}

// WithdrawalExists checks if the Withdrawal row exists.
func WithdrawalExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"withdrawals\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if withdrawals exists")
	}

	return exists, nil
}
