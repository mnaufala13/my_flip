// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BigflipResponse is an object representing the database table.
type BigflipResponse struct {
	ID           string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	URL          string    `boil:"url" json:"url" toml:"url" yaml:"url"`
	Payload      null.JSON `boil:"payload" json:"payload,omitempty" toml:"payload" yaml:"payload,omitempty"`
	WithdrawalID string    `boil:"withdrawal_id" json:"withdrawal_id" toml:"withdrawal_id" yaml:"withdrawal_id"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *bigflipResponseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bigflipResponseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BigflipResponseColumns = struct {
	ID           string
	URL          string
	Payload      string
	WithdrawalID string
	CreatedAt    string
}{
	ID:           "id",
	URL:          "url",
	Payload:      "payload",
	WithdrawalID: "withdrawal_id",
	CreatedAt:    "created_at",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BigflipResponseWhere = struct {
	ID           whereHelperstring
	URL          whereHelperstring
	Payload      whereHelpernull_JSON
	WithdrawalID whereHelperstring
	CreatedAt    whereHelpertime_Time
}{
	ID:           whereHelperstring{field: "\"bigflip_response\".\"id\""},
	URL:          whereHelperstring{field: "\"bigflip_response\".\"url\""},
	Payload:      whereHelpernull_JSON{field: "\"bigflip_response\".\"payload\""},
	WithdrawalID: whereHelperstring{field: "\"bigflip_response\".\"withdrawal_id\""},
	CreatedAt:    whereHelpertime_Time{field: "\"bigflip_response\".\"created_at\""},
}

// BigflipResponseRels is where relationship names are stored.
var BigflipResponseRels = struct {
}{}

// bigflipResponseR is where relationships are stored.
type bigflipResponseR struct {
}

// NewStruct creates a new relationship struct
func (*bigflipResponseR) NewStruct() *bigflipResponseR {
	return &bigflipResponseR{}
}

// bigflipResponseL is where Load methods for each relationship are stored.
type bigflipResponseL struct{}

var (
	bigflipResponseAllColumns            = []string{"id", "url", "payload", "withdrawal_id", "created_at"}
	bigflipResponseColumnsWithoutDefault = []string{"url", "payload"}
	bigflipResponseColumnsWithDefault    = []string{"id", "withdrawal_id", "created_at"}
	bigflipResponsePrimaryKeyColumns     = []string{"id"}
)

type (
	// BigflipResponseSlice is an alias for a slice of pointers to BigflipResponse.
	// This should generally be used opposed to []BigflipResponse.
	BigflipResponseSlice []*BigflipResponse
	// BigflipResponseHook is the signature for custom BigflipResponse hook methods
	BigflipResponseHook func(context.Context, boil.ContextExecutor, *BigflipResponse) error

	bigflipResponseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bigflipResponseType                 = reflect.TypeOf(&BigflipResponse{})
	bigflipResponseMapping              = queries.MakeStructMapping(bigflipResponseType)
	bigflipResponsePrimaryKeyMapping, _ = queries.BindMapping(bigflipResponseType, bigflipResponseMapping, bigflipResponsePrimaryKeyColumns)
	bigflipResponseInsertCacheMut       sync.RWMutex
	bigflipResponseInsertCache          = make(map[string]insertCache)
	bigflipResponseUpdateCacheMut       sync.RWMutex
	bigflipResponseUpdateCache          = make(map[string]updateCache)
	bigflipResponseUpsertCacheMut       sync.RWMutex
	bigflipResponseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bigflipResponseBeforeInsertHooks []BigflipResponseHook
var bigflipResponseBeforeUpdateHooks []BigflipResponseHook
var bigflipResponseBeforeDeleteHooks []BigflipResponseHook
var bigflipResponseBeforeUpsertHooks []BigflipResponseHook

var bigflipResponseAfterInsertHooks []BigflipResponseHook
var bigflipResponseAfterSelectHooks []BigflipResponseHook
var bigflipResponseAfterUpdateHooks []BigflipResponseHook
var bigflipResponseAfterDeleteHooks []BigflipResponseHook
var bigflipResponseAfterUpsertHooks []BigflipResponseHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BigflipResponse) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bigflipResponseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BigflipResponse) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bigflipResponseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BigflipResponse) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bigflipResponseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BigflipResponse) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bigflipResponseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BigflipResponse) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bigflipResponseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BigflipResponse) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bigflipResponseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BigflipResponse) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bigflipResponseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BigflipResponse) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bigflipResponseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BigflipResponse) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bigflipResponseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBigflipResponseHook registers your hook function for all future operations.
func AddBigflipResponseHook(hookPoint boil.HookPoint, bigflipResponseHook BigflipResponseHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		bigflipResponseBeforeInsertHooks = append(bigflipResponseBeforeInsertHooks, bigflipResponseHook)
	case boil.BeforeUpdateHook:
		bigflipResponseBeforeUpdateHooks = append(bigflipResponseBeforeUpdateHooks, bigflipResponseHook)
	case boil.BeforeDeleteHook:
		bigflipResponseBeforeDeleteHooks = append(bigflipResponseBeforeDeleteHooks, bigflipResponseHook)
	case boil.BeforeUpsertHook:
		bigflipResponseBeforeUpsertHooks = append(bigflipResponseBeforeUpsertHooks, bigflipResponseHook)
	case boil.AfterInsertHook:
		bigflipResponseAfterInsertHooks = append(bigflipResponseAfterInsertHooks, bigflipResponseHook)
	case boil.AfterSelectHook:
		bigflipResponseAfterSelectHooks = append(bigflipResponseAfterSelectHooks, bigflipResponseHook)
	case boil.AfterUpdateHook:
		bigflipResponseAfterUpdateHooks = append(bigflipResponseAfterUpdateHooks, bigflipResponseHook)
	case boil.AfterDeleteHook:
		bigflipResponseAfterDeleteHooks = append(bigflipResponseAfterDeleteHooks, bigflipResponseHook)
	case boil.AfterUpsertHook:
		bigflipResponseAfterUpsertHooks = append(bigflipResponseAfterUpsertHooks, bigflipResponseHook)
	}
}

// One returns a single bigflipResponse record from the query.
func (q bigflipResponseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BigflipResponse, error) {
	o := &BigflipResponse{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bigflip_response")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BigflipResponse records from the query.
func (q bigflipResponseQuery) All(ctx context.Context, exec boil.ContextExecutor) (BigflipResponseSlice, error) {
	var o []*BigflipResponse

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BigflipResponse slice")
	}

	if len(bigflipResponseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BigflipResponse records in the query.
func (q bigflipResponseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bigflip_response rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bigflipResponseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bigflip_response exists")
	}

	return count > 0, nil
}

// BigflipResponses retrieves all the records using an executor.
func BigflipResponses(mods ...qm.QueryMod) bigflipResponseQuery {
	mods = append(mods, qm.From("\"bigflip_response\""))
	return bigflipResponseQuery{NewQuery(mods...)}
}

// FindBigflipResponse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBigflipResponse(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*BigflipResponse, error) {
	bigflipResponseObj := &BigflipResponse{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bigflip_response\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bigflipResponseObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bigflip_response")
	}

	return bigflipResponseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BigflipResponse) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bigflip_response provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bigflipResponseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bigflipResponseInsertCacheMut.RLock()
	cache, cached := bigflipResponseInsertCache[key]
	bigflipResponseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bigflipResponseAllColumns,
			bigflipResponseColumnsWithDefault,
			bigflipResponseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bigflipResponseType, bigflipResponseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bigflipResponseType, bigflipResponseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bigflip_response\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bigflip_response\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bigflip_response")
	}

	if !cached {
		bigflipResponseInsertCacheMut.Lock()
		bigflipResponseInsertCache[key] = cache
		bigflipResponseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BigflipResponse.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BigflipResponse) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bigflipResponseUpdateCacheMut.RLock()
	cache, cached := bigflipResponseUpdateCache[key]
	bigflipResponseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bigflipResponseAllColumns,
			bigflipResponsePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bigflip_response, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bigflip_response\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bigflipResponsePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bigflipResponseType, bigflipResponseMapping, append(wl, bigflipResponsePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bigflip_response row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bigflip_response")
	}

	if !cached {
		bigflipResponseUpdateCacheMut.Lock()
		bigflipResponseUpdateCache[key] = cache
		bigflipResponseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bigflipResponseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bigflip_response")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bigflip_response")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BigflipResponseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bigflipResponsePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bigflip_response\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bigflipResponsePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bigflipResponse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bigflipResponse")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BigflipResponse) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bigflip_response provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bigflipResponseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bigflipResponseUpsertCacheMut.RLock()
	cache, cached := bigflipResponseUpsertCache[key]
	bigflipResponseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bigflipResponseAllColumns,
			bigflipResponseColumnsWithDefault,
			bigflipResponseColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bigflipResponseAllColumns,
			bigflipResponsePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bigflip_response, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bigflipResponsePrimaryKeyColumns))
			copy(conflict, bigflipResponsePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bigflip_response\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bigflipResponseType, bigflipResponseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bigflipResponseType, bigflipResponseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bigflip_response")
	}

	if !cached {
		bigflipResponseUpsertCacheMut.Lock()
		bigflipResponseUpsertCache[key] = cache
		bigflipResponseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BigflipResponse record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BigflipResponse) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BigflipResponse provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bigflipResponsePrimaryKeyMapping)
	sql := "DELETE FROM \"bigflip_response\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bigflip_response")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bigflip_response")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bigflipResponseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bigflipResponseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bigflip_response")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bigflip_response")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BigflipResponseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bigflipResponseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bigflipResponsePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bigflip_response\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bigflipResponsePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bigflipResponse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bigflip_response")
	}

	if len(bigflipResponseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BigflipResponse) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBigflipResponse(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BigflipResponseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BigflipResponseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bigflipResponsePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bigflip_response\".* FROM \"bigflip_response\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bigflipResponsePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BigflipResponseSlice")
	}

	*o = slice

	return nil
}

// BigflipResponseExists checks if the BigflipResponse row exists.
func BigflipResponseExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bigflip_response\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bigflip_response exists")
	}

	return exists, nil
}
